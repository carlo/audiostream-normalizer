# audiostream-normalizer

This script automates the audio normalization of any given video file.

Sometimes video files are too loud or too silent, analyzing these files with
`ffmpeg` will show their `max_volume` being too high or to low.  In a perfect
world, all files would have a `max_volume` of 0.0 dB, but mankind is not ready
for that yet.  Another `ffmpeg` call can set the audio volume without actually
reëncoding the audio stream.  `normalizer.rb` does these steps automatically,
and a bit more.

Pass in a file name (a glob pattern will work as well), the script will first
get the maximum volume using ffmpeg, then change the it to be 0.0 dB.  If an
optional gain is specified, it'll be applied.

The new video file is then saved with a new file extension (prefixed with `.vol`
by default, e.g. `video.mkv` will become `video.vol.mkv`), and the original file
is moved to another folder, so only the processed file will remain in the source
folder.

The script is very, very simple and rather hacky.  I wrote it in about 2h on a
lazy Sunday afternoon.  It scratches _my_ itch, and that's all I wanted.


### Usage

    Usage: normalizer.rb [options]
        -f, --file FILE       File(s) to normalize (glob allowed!)
        -e, --ext PREFIX      File extension prefix for processed file
                              (default: .vol, e.g. video.mkv ➔ video.vol.mkv)
        -m, --move FOLDER     Folder to move original files to after processing
        -g, --gain GAIN       Gain in dB to apply on top of automatic normalizing
                              (optional)
        -h, --help            Prints this help


### Examples

Single file, normalize and set additional gain to 2.0 dB.

    ➔ ./normalizer.rb --file "~/Desktop/example.avi" \
        --move ~/Desktop/old_files \
        --gain 2

    [1/1] Working /Users/carlo/Desktop/example.avi…
    - Analyzing…
      - max volume: -1.0 dB
    - Processing…
      - new volume: 3.0 dB
      - new filename: /Users/carlo/Desktop/example.vol.avi
      - new volume set
      - original file was moved to /Users/carlo/Desktop/old_files

Batch process files, normalize and set file extension prefix to `-normalized`.

    ➔ ./normalizer.rb --file "~/Desktop/S01E*.mp4" \
        --move ~/Desktop/old_files \
        --ext -normalized

    [1/8] Working /Users/carlo/Desktop/S01E01.mp4…
    - Analyzing…
      - max volume: -1.0 dB
    - Processing…
      - new volume: 3.0 dB
      - new filename: /Users/carlo/Desktop/S01E01-normalized.mp4
      - new volume set
    - Nothing to do, skipping!ers/carlo/Desktop/old_files

    [2/8] Working /Users/carlo/Desktop/S01E02.mp4…
    - Analyzing…
      - max volume: -2.1 dB
    - Processing…
      - new volume: 2.1 dB
      - new filename: /Users/carlo/Desktop/S01E02-normalized.mp4
      - new volume set
      - original file was moved to /Users/carlo/Desktop/old_files

    [3/8] Working /Users/carlo/Desktop/S01E03.mp4…
    - Analyzing…
      - max volume: 0.0 dB
    - Nothing to do, skipping!

    etc.


#### Note about glob patterns

Some shells will run glob patterns that are passed in a `--file` parameter
before the script is even called.   If you want to circumvent that, wrap the
file name/pattern in quotes. For example, take the following examples:

    # Good
    ./normalizer.rb --file "~/Desktop/S01E*.mp4" --move ~/Desktop/old_files

    # Bad
    ./normalizer.rb --file ~/Desktop/S01E*.mp4 --move ~/Desktop/old_files

In the first call, the script will actually receive the glob pattern because it
was passed in as a string.  It'll use the pattern to find a list of files, then
process them, as you would expect.

In the second call, it might not; the `fish` shell for example will execute the
glob pattern and internally substitute the `~/Desktop/S01E*.mp4` portion of the
script call with the list of files it found  for that pattern, namely
`~/Desktop/S01E01.mp4`, `~/Desktop/S01E02.mp4` etc. Since `--file` only expects
one file name/pattern, everything but `~/Desktop/S01E01.mp4` will be discarded,
i.e. `normalizer.rb` will only process that one single file.


### Prerequisites

- Ruby 2.2.0
- ffmpeg 2.7.2


### Author

Carlo Zottmann, carlo@zottmann.org, http://carlo.zottmann.org


### Warning

Things might break, files might be lost, etc.  Use at your own risk.

No, seriously.


### License

    DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
            Version 2, December 2004

    Copyright (C) 2004 Sam Hocevar
    14 rue de Plaisance, 75014 Paris, France
    Everyone is permitted to copy and distribute verbatim or modified
    copies of this license document, and changing it is allowed as long
    as the name is changed.

    DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

    0. You just DO WHAT THE FUCK YOU WANT TO.
